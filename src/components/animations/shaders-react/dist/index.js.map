{
  "version": 3,
  "sources": ["../src/shader-mount.tsx", "../src/shaders/grain-clouds.tsx", "../src/index.ts", "../src/shaders/mesh-gradient.tsx", "../src/shaders/smoke-ring.tsx", "../src/shaders/neuro-noise.tsx", "../src/shaders/dots-orbit.tsx", "../src/shaders/dots-grid.tsx", "../src/shaders/stepped-simplex-noise.tsx", "../src/shaders/metaballs.tsx", "../src/shaders/waves.tsx", "../src/shaders/perlin-noise.tsx", "../src/shaders/voronoi.tsx", "../src/shaders/warp.tsx"],
  "sourcesContent": ["import React, { useEffect, useRef } from 'react';\nimport { ShaderMount as ShaderMountVanilla } from '@paper-design/shaders';\n\nexport interface ShaderMountProps {\n  ref?: React.RefObject<HTMLCanvasElement>;\n  fragmentShader: string;\n  style?: React.CSSProperties;\n  uniforms?: Record<string, number | number[]>;\n  webGlContextAttributes?: WebGLContextAttributes;\n  speed?: number;\n  seed?: number;\n}\n\n/** Params that every shader can set as part of their controls */\nexport type GlobalParams = Pick<ShaderMountProps, 'speed' | 'seed'>;\n\nexport const ShaderMount: React.FC<ShaderMountProps> = ({\n  ref,\n  fragmentShader,\n  style,\n  uniforms = {},\n  webGlContextAttributes,\n  speed = 1,\n  seed = 0,\n}) => {\n  const canvasRef = ref ?? useRef<HTMLCanvasElement>(null);\n  const shaderMountRef = useRef<ShaderMountVanilla | null>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      shaderMountRef.current = new ShaderMountVanilla(\n        canvasRef.current,\n        fragmentShader,\n        uniforms,\n        webGlContextAttributes,\n        speed,\n        seed\n      );\n    }\n\n    return () => {\n      shaderMountRef.current?.dispose();\n    };\n  }, [fragmentShader, webGlContextAttributes]);\n\n  useEffect(() => {\n    shaderMountRef.current?.setUniforms(uniforms);\n  }, [uniforms]);\n\n  useEffect(() => {\n    shaderMountRef.current?.setSpeed(speed);\n  }, [speed]);\n\n  useEffect(() => {\n    shaderMountRef.current?.setSeed(seed);\n  }, [seed]);\n\n  return <canvas ref={canvasRef} style={style} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, grainCloudsFragmentShader, type GrainCloudsUniforms } from '@paper-design/shaders';\n\nexport type GrainCloudsParams = {\n  scale?: number;\n  color1?: string;\n  color2?: string;\n  grainAmount?: number;\n} & GlobalParams;\n\nexport type GrainCloudsProps = Omit<ShaderMountProps, 'fragmentShader'> & GrainCloudsParams;\n\ntype GrainCloudsPreset = { name: string; params: Required<GrainCloudsParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: GrainCloudsPreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    speed: 0.3,\n    seed: 0,\n    color1: 'hsla(0, 0%, 0%, 1)',\n    color2: 'hsla(0, 0%, 100%, 1)',\n    grainAmount: 1,\n  },\n};\n\nexport const skyPreset: GrainCloudsPreset = {\n  name: 'Sky',\n  params: {\n    scale: 1,\n    speed: 0.3,\n    seed: 0,\n    color1: 'hsla(218, 100%, 73%, 1)',\n    color2: 'hsla(0, 0%, 100%, 1)',\n    grainAmount: 0,\n  },\n};\n\nexport const grainCloudsPresets: GrainCloudsPreset[] = [defaultPreset, skyPreset];\n\nexport const GrainClouds = (props: GrainCloudsProps): JSX.Element => {\n  const uniforms: GrainCloudsUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_grainAmount: props.grainAmount ?? defaultPreset.params.grainAmount,\n    };\n  }, [props.scale, props.color1, props.color2, props.grainAmount]);\n\n  return <ShaderMount {...props} fragmentShader={grainCloudsFragmentShader} uniforms={uniforms} />;\n};\n", "// ----- ShaderMount ----- //\nexport { ShaderMount } from './shader-mount';\n\n// ----- Fragment shaders ----- //\n\n// Grain clouds\nexport { GrainClouds, grainCloudsPresets } from './shaders/grain-clouds';\nexport { type GrainCloudsProps } from './shaders/grain-clouds';\nexport { type GrainCloudsParams } from './shaders/grain-clouds';\nexport { type GrainCloudsUniforms } from '@paper-design/shaders';\n\n// Mesh gradient\nexport { MeshGradient, meshGradientPresets } from './shaders/mesh-gradient';\nexport { type MeshGradientProps } from './shaders/mesh-gradient';\nexport { type MeshGradientParams } from './shaders/mesh-gradient';\nexport { type MeshGradientUniforms } from '@paper-design/shaders';\n\n// Smoke ring\nexport { SmokeRing, smokeRingPresets } from './shaders/smoke-ring';\nexport { type SmokeRingProps } from './shaders/smoke-ring';\nexport { type SmokeRingParams } from './shaders/smoke-ring';\nexport { type SmokeRingUniforms } from '@paper-design/shaders';\n\n// Neuro noise\nexport { NeuroNoise, neuroNoisePresets } from './shaders/neuro-noise';\nexport { type NeuroNoiseProps } from './shaders/neuro-noise';\nexport { type NeuroNoiseParams } from './shaders/neuro-noise';\nexport { type NeuroNoiseUniforms } from '@paper-design/shaders';\n\n// Animated dots pattern: orbit type of animation\nexport { DotsOrbit, dotsOrbitPresets } from './shaders/dots-orbit';\nexport { type DotsOrbitProps } from './shaders/dots-orbit';\nexport { type DotsOrbitParams } from './shaders/dots-orbit';\nexport { type DotsOrbitUniforms } from '@paper-design/shaders';\n\n// Dot Grid\nexport { DotsGrid, dotsGridPresets } from './shaders/dots-grid';\nexport { type DotsGridProps } from './shaders/dots-grid';\nexport { type DotsGridParams } from './shaders/dots-grid';\nexport { type DotsGridUniforms, DotsGridShapes, type DotsGridShape } from '@paper-design/shaders';\n\n// Stepped simplex noise\nexport { SteppedSimplexNoise, steppedSimplexNoisePresets } from './shaders/stepped-simplex-noise';\nexport { type SteppedSimplexNoiseProps } from './shaders/stepped-simplex-noise';\nexport { type SteppedSimplexNoiseParams } from './shaders/stepped-simplex-noise';\nexport { type SteppedSimplexNoiseUniforms } from '@paper-design/shaders';\n\n// Metaballs\nexport { Metaballs, metaballsPresets } from './shaders/metaballs';\nexport { type MetaballsProps } from './shaders/metaballs';\nexport { type MetaballsParams } from './shaders/metaballs';\nexport { type MetaballsUniforms } from '@paper-design/shaders';\n\n// Waves\nexport { Waves, wavesPresets } from './shaders/waves';\nexport { type WavesProps } from './shaders/waves';\nexport { type WavesParams } from './shaders/waves';\nexport { type WavesUniforms } from '@paper-design/shaders';\n\n// Perlin noise\nexport { PerlinNoise, perlinNoisePresets } from './shaders/perlin-noise';\nexport { type PerlinNoiseProps } from './shaders/perlin-noise';\nexport { type PerlinNoiseParams } from './shaders/perlin-noise';\nexport { type PerlinNoiseUniforms } from '@paper-design/shaders';\n\n// Voronoi diagram\nexport { Voronoi, voronoiPresets } from './shaders/voronoi';\nexport { type VoronoiProps } from './shaders/voronoi';\nexport { type VoronoiParams } from './shaders/voronoi';\nexport { type VoronoiUniforms } from '@paper-design/shaders';\n\n// Warping distortion\nexport { Warp, warpPresets } from './shaders/warp';\nexport { type WarpProps } from './shaders/warp';\nexport { type WarpParams } from './shaders/warp';\nexport { type WarpUniforms, PatternShapes, type PatternShape } from '@paper-design/shaders';\n\n// ----- Uniform conversion utils ----- //\nexport { getShaderColorFromString } from '@paper-design/shaders';\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, meshGradientFragmentShader, type MeshGradientUniforms } from '@paper-design/shaders';\n\nexport type MeshGradientParams = {\n  color1?: string;\n  color2?: string;\n  color3?: string;\n  color4?: string;\n} & GlobalParams;\n\nexport type MeshGradientProps = Omit<ShaderMountProps, 'fragmentShader'> & MeshGradientParams;\n\ntype MeshGradientPreset = { name: string; params: Required<MeshGradientParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: MeshGradientPreset = {\n  name: 'Default',\n  params: {\n    speed: 0.15,\n    seed: 0,\n    color1: 'hsla(259, 29%, 73%, 1)',\n    color2: 'hsla(263, 57%, 39%, 1)',\n    color3: 'hsla(48, 73%, 84%, 1)',\n    color4: 'hsla(295, 32%, 70%, 1)',\n  },\n} as const;\n\nexport const beachPreset: MeshGradientPreset = {\n  name: 'Beach',\n  params: {\n    speed: 0.1,\n    seed: 0,\n    color1: 'hsla(186, 81%, 83%, 1)',\n    color2: 'hsla(198, 55%, 68%, 1)',\n    color3: 'hsla(53, 67%, 88%, 1)',\n    color4: 'hsla(45, 93%, 73%, 1)',\n  },\n};\n\nexport const fadedPreset: MeshGradientPreset = {\n  name: 'Faded',\n  params: {\n    speed: -0.3,\n    seed: 0,\n    color1: 'hsla(186, 41%, 90%, 1)',\n    color2: 'hsla(208, 71%, 85%, 1)',\n    color3: 'hsla(183, 51%, 92%, 1)',\n    color4: 'hsla(201, 72%, 90%, 1)',\n  },\n};\n\nexport const meshGradientPresets: MeshGradientPreset[] = [defaultPreset, beachPreset, fadedPreset];\n\nexport const MeshGradient = (props: MeshGradientProps): JSX.Element => {\n  const uniforms: MeshGradientUniforms = useMemo(() => {\n    return {\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_color3: getShaderColorFromString(props.color3, defaultPreset.params.color3),\n      u_color4: getShaderColorFromString(props.color4, defaultPreset.params.color4),\n    };\n  }, [props.color1, props.color2, props.color3, props.color4]);\n\n  return <ShaderMount {...props} fragmentShader={meshGradientFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, smokeRingFragmentShader, type SmokeRingUniforms } from '@paper-design/shaders';\n\nexport type SmokeRingParams = {\n  colorBack?: string;\n  colorInner?: string;\n  colorOuter?: string;\n  scale?: number;\n  noiseScale?: number;\n  thickness?: number;\n} & GlobalParams;\n\nexport type SmokeRingProps = Omit<ShaderMountProps, 'fragmentShader'> & SmokeRingParams;\n\ntype SmokeRingPreset = { name: string; params: Required<SmokeRingParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: SmokeRingPreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    speed: 1,\n    seed: 0,\n    colorBack: 'hsla(208, 54%, 7%, 1)',\n    colorInner: 'hsla(0, 0%, 100%, 1)',\n    colorOuter: 'hsla(211, 100%, 64%, 1)',\n    noiseScale: 1.4,\n    thickness: 0.33,\n  },\n} as const;\n\nexport const cloudPreset: SmokeRingPreset = {\n  name: 'Cloud',\n  params: {\n    scale: 1,\n    speed: 1,\n    seed: 0,\n    colorBack: 'hsla(218, 100%, 62%, 1)',\n    colorInner: 'hsla(0, 0%, 100%, 1)',\n    colorOuter: 'hsla(0, 0%, 100%, 1)',\n    noiseScale: 1.8,\n    thickness: 0.7,\n  },\n};\n\nexport const firePreset: SmokeRingPreset = {\n  name: 'Fire',\n  params: {\n    scale: 1,\n    speed: 4,\n    seed: 0,\n    colorBack: 'hsla(20, 100%, 5%, 1)',\n    colorInner: 'hsla(40, 100%, 50%, 1)',\n    colorOuter: 'hsla(0, 100%, 50%, 1)',\n    noiseScale: 1.4,\n    thickness: 0.35,\n  },\n};\n\nexport const electricPreset: SmokeRingPreset = {\n  name: 'Electric',\n  params: {\n    scale: 1,\n    speed: 2.5,\n    seed: 0,\n    colorBack: 'hsla(47, 50%, 7%, 1)',\n    colorInner: 'hsla(47, 100%, 64%, 1)',\n    colorOuter: 'hsla(47, 100%, 64%, 1)',\n    noiseScale: 1.8,\n    thickness: 0.1,\n  },\n};\n\nexport const poisonPreset: SmokeRingPreset = {\n  name: 'Poison',\n  params: {\n    scale: 1,\n    speed: 3,\n    seed: 0,\n    colorBack: 'hsla(120, 100%, 3%, 1)',\n    colorInner: 'hsla(120, 100%, 3%, 1)',\n    colorOuter: 'hsla(120, 100%, 66%, 1)',\n    noiseScale: 5,\n    thickness: 0.6,\n  },\n};\n\nexport const smokeRingPresets: SmokeRingPreset[] = [\n  defaultPreset,\n  cloudPreset,\n  firePreset,\n  electricPreset,\n  poisonPreset,\n];\n\nexport const SmokeRing = (props: SmokeRingProps): JSX.Element => {\n  const uniforms: SmokeRingUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_colorBack: getShaderColorFromString(props.colorBack, defaultPreset.params.colorBack),\n      u_colorInner: getShaderColorFromString(props.colorInner, defaultPreset.params.colorInner),\n      u_colorOuter: getShaderColorFromString(props.colorOuter, defaultPreset.params.colorOuter),\n      u_noiseScale: props.noiseScale ?? defaultPreset.params.noiseScale,\n      u_thickness: props.thickness ?? defaultPreset.params.thickness,\n    };\n  }, [props.scale, props.colorBack, props.colorInner, props.colorOuter, props.noiseScale, props.thickness]);\n\n  return <ShaderMount {...props} fragmentShader={smokeRingFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, neuroNoiseFragmentShader, type NeuroNoiseUniforms } from '@paper-design/shaders';\n\nexport type NeuroNoiseParams = {\n  scale?: number;\n  colorFront?: string;\n  colorBack?: string;\n  brightness?: number;\n} & GlobalParams;\n\nexport type NeuroNoiseProps = Omit<ShaderMountProps, 'fragmentShader'> & NeuroNoiseParams;\n\ntype NeuroNoisePreset = { name: string; params: Required<NeuroNoiseParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: NeuroNoisePreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    speed: 1,\n    seed: 0,\n    colorFront: 'hsla(261, 100%, 82%, 1)',\n    colorBack: 'hsla(0, 0%, 0%, 1)',\n    brightness: 1.3,\n  },\n} as const;\n\nconst marblePreset: NeuroNoisePreset = {\n  name: 'Marble',\n  params: {\n    scale: 0.4,\n    speed: 0,\n    seed: 0,\n    colorFront: 'hsla(230, 24%, 15%, 1)',\n    colorBack: 'hsla(0, 0%, 97%, 1)',\n    brightness: 1.1,\n  },\n} as const;\n\nexport const neuroNoisePresets: NeuroNoisePreset[] = [defaultPreset, marblePreset] as const;\n\nexport const NeuroNoise = (props: NeuroNoiseProps): JSX.Element => {\n  const uniforms: NeuroNoiseUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_colorFront: getShaderColorFromString(props.colorFront, defaultPreset.params.colorFront),\n      u_colorBack: getShaderColorFromString(props.colorBack, defaultPreset.params.colorBack),\n      u_brightness: props.brightness ?? defaultPreset.params.brightness,\n    };\n  }, [props.scale, props.colorFront, props.colorBack, props.brightness]);\n\n  return <ShaderMount {...props} fragmentShader={neuroNoiseFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, dotsOrbitFragmentShader, type DotsOrbitUniforms } from '@paper-design/shaders';\n\nexport type DotsOrbitParams = {\n  scale?: number;\n  color1?: string;\n  color2?: string;\n  color3?: string;\n  color4?: string;\n  dotSize?: number;\n  dotSizeRange?: number;\n  spreading?: number;\n} & GlobalParams;\n\nexport type DotsOrbitProps = Omit<ShaderMountProps, 'fragmentShader'> & DotsOrbitParams;\n\ntype DotsOrbitPreset = { name: string; params: Required<DotsOrbitParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: DotsOrbitPreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    speed: 2,\n    seed: 0,\n    color1: 'hsla(358, 66%, 49%, 1)',\n    color2: 'hsla(145, 30%, 33%, 1)',\n    color3: 'hsla(39, 88%, 52%, 1)',\n    color4: 'hsla(274, 30%, 35%, 1)',\n    dotSize: 0.7,\n    dotSizeRange: 0.4,\n    spreading: 1,\n  },\n} as const;\n\nexport const dotsOrbitPresets: DotsOrbitPreset[] = [defaultPreset];\n\nexport const DotsOrbit = (props: DotsOrbitProps): JSX.Element => {\n  const uniforms: DotsOrbitUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_color3: getShaderColorFromString(props.color3, defaultPreset.params.color3),\n      u_color4: getShaderColorFromString(props.color4, defaultPreset.params.color4),\n      u_dotSize: props.dotSize ?? defaultPreset.params.dotSize,\n      u_dotSizeRange: props.dotSizeRange ?? defaultPreset.params.dotSizeRange,\n      u_spreading: props.spreading ?? defaultPreset.params.spreading,\n    };\n  }, [\n    props.scale,\n    props.color1,\n    props.color2,\n    props.color3,\n    props.color4,\n    props.dotSize,\n    props.dotSizeRange,\n    props.spreading,\n  ]);\n\n  return <ShaderMount {...props} fragmentShader={dotsOrbitFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type ShaderMountProps } from '../shader-mount';\nimport {\n  dotsGridFragmentShader,\n  getShaderColorFromString,\n  type DotsGridUniforms,\n  type DotsGridShape,\n  DotsGridShapes,\n} from '@paper-design/shaders';\n\nexport type DotsGridParams = {\n  colorBack?: string;\n  colorFill?: string;\n  colorStroke?: string;\n  dotSize?: number;\n  gridSpacingX?: number;\n  gridSpacingY?: number;\n  strokeWidth?: number;\n  sizeRange?: number;\n  opacityRange?: number;\n  shape?: DotsGridShape;\n};\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport type DotsGridProps = Omit<ShaderMountProps, 'fragmentShader'> & DotsGridParams;\n\ntype DotsGridPreset = { name: string; params: Required<DotsGridParams> };\n\nexport const defaultPreset: DotsGridPreset = {\n  name: 'Default',\n  params: {\n    colorBack: 'hsla(358, 66%, 49%, 0)',\n    colorFill: 'hsla(145, 30%, 10%, 1)',\n    colorStroke: 'hsla(39, 88%, 52%, 1)',\n    dotSize: 2,\n    gridSpacingX: 50,\n    gridSpacingY: 50,\n    strokeWidth: 0,\n    sizeRange: 0,\n    opacityRange: 0,\n    shape: DotsGridShapes.Circle,\n  },\n} as const;\n\nconst trianglesPreset: DotsGridPreset = {\n  name: 'Triangles',\n  params: {\n    colorBack: 'hsla(0, 0%, 100%, 1)',\n    colorFill: 'hsla(0, 0%, 100%, 1)',\n    colorStroke: 'hsla(0, 0%, 0%, .5)',\n    dotSize: 5,\n    gridSpacingX: 32,\n    gridSpacingY: 32,\n    strokeWidth: 1,\n    sizeRange: 0,\n    opacityRange: 0,\n    shape: DotsGridShapes.Triangle,\n  },\n} as const;\n\nconst bubblesPreset: DotsGridPreset = {\n  name: 'Bubbles',\n  params: {\n    colorBack: 'hsla(234, 100%, 31%, .5)',\n    colorFill: 'hsla(100, 30%, 100%, 1)',\n    colorStroke: 'hsla(0, 100%, 0%, 1)',\n    dotSize: 28,\n    gridSpacingX: 60,\n    gridSpacingY: 60,\n    strokeWidth: 12,\n    sizeRange: 0.7,\n    opacityRange: 1.3,\n    shape: DotsGridShapes.Circle,\n  },\n} as const;\n\nconst treeLinePreset: DotsGridPreset = {\n  name: 'Tree line',\n  params: {\n    colorBack: 'hsla(100, 100%, 36%, .05)',\n    colorFill: 'hsla(150, 80%, 10%, 1)',\n    colorStroke: 'hsla(0, 0%, 0%, 1)',\n    dotSize: 8,\n    gridSpacingX: 20,\n    gridSpacingY: 90,\n    strokeWidth: 0,\n    sizeRange: 1,\n    opacityRange: 0.6,\n    shape: DotsGridShapes.Circle,\n  },\n} as const;\n\nconst diamondsPreset: DotsGridPreset = {\n  name: 'Diamonds',\n  params: {\n    colorBack: 'hsla(0, 0%, 0%, 0)',\n    colorFill: 'hsla(0, 100%, 50%, 1)',\n    colorStroke: 'hsla(0, 0%, 0%, 1)',\n    dotSize: 15,\n    gridSpacingX: 30,\n    gridSpacingY: 30,\n    strokeWidth: 0,\n    sizeRange: 0,\n    opacityRange: 2,\n    shape: DotsGridShapes.Diamond,\n  },\n} as const;\n\nconst wallpaperPreset: DotsGridPreset = {\n  name: 'Wallpaper',\n  params: {\n    colorBack: 'hsla(154, 33%, 19%, 1)',\n    colorFill: 'hsla(0, 0%, 0%, 0)',\n    colorStroke: 'hsla(36, 48%, 58%, 1)',\n    dotSize: 9,\n    gridSpacingX: 32,\n    gridSpacingY: 32,\n    strokeWidth: 1,\n    sizeRange: 0,\n    opacityRange: 0,\n    shape: DotsGridShapes.Diamond,\n  },\n} as const;\n\nconst matrixPreset: DotsGridPreset = {\n  name: 'Enter the Matrix',\n  params: {\n    colorBack: 'hsla(0, 100%, 0%, 1)',\n    colorFill: 'hsla(182, 100%, 64%, 1)',\n    colorStroke: 'hsla(0, 100%, 100%, 0)',\n    dotSize: 2,\n    gridSpacingX: 10,\n    gridSpacingY: 10,\n    strokeWidth: 0.5,\n    sizeRange: 0.25,\n    opacityRange: 1,\n    shape: DotsGridShapes.Triangle,\n  },\n} as const;\n\nconst waveformPreset: DotsGridPreset = {\n  name: 'Waveform',\n  params: {\n    colorBack: 'hsla(0, 100%, 100%, 1)',\n    colorFill: 'hsla(227, 93%, 38%, 1)',\n    colorStroke: 'hsla(0, 0%, 0%, 0)',\n    dotSize: 100,\n    gridSpacingX: 2,\n    gridSpacingY: 215,\n    strokeWidth: 0,\n    sizeRange: 1,\n    opacityRange: 0,\n    shape: DotsGridShapes.Square,\n  },\n} as const;\n\nexport const dotsGridPresets: DotsGridPreset[] = [\n  defaultPreset,\n  trianglesPreset,\n  bubblesPreset,\n  treeLinePreset,\n  diamondsPreset,\n  wallpaperPreset,\n  matrixPreset,\n  waveformPreset,\n];\n\nexport const DotsGrid = (props: DotsGridProps): JSX.Element => {\n  const uniforms: DotsGridUniforms = useMemo(() => {\n    return {\n      u_colorBack: getShaderColorFromString(props.colorBack, defaultPreset.params.colorBack),\n      u_colorFill: getShaderColorFromString(props.colorFill, defaultPreset.params.colorStroke),\n      u_colorStroke: getShaderColorFromString(props.colorStroke, defaultPreset.params.colorStroke),\n      u_dotSize: props.dotSize ?? defaultPreset.params.dotSize,\n      u_gridSpacingX: props.gridSpacingX ?? defaultPreset.params.gridSpacingX,\n      u_gridSpacingY: props.gridSpacingY ?? defaultPreset.params.gridSpacingY,\n      u_strokeWidth: props.strokeWidth ?? defaultPreset.params.strokeWidth,\n      u_sizeRange: props.sizeRange ?? defaultPreset.params.sizeRange,\n      u_opacityRange: props.opacityRange ?? defaultPreset.params.opacityRange,\n      u_shape: props.shape ?? defaultPreset.params.shape,\n    };\n  }, [\n    props.colorBack,\n    props.colorFill,\n    props.colorStroke,\n    props.dotSize,\n    props.gridSpacingX,\n    props.gridSpacingY,\n    props.strokeWidth,\n    props.sizeRange,\n    props.opacityRange,\n    props.shape,\n  ]);\n\n  return <ShaderMount {...props} fragmentShader={dotsGridFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport {\n  getShaderColorFromString,\n  steppedSimplexNoiseFragmentShader,\n  type SteppedSimplexNoiseUniforms,\n} from '@paper-design/shaders';\n\nexport type SteppedSimplexNoiseParams = {\n  scale?: number;\n  color1?: string;\n  color2?: string;\n  color3?: string;\n  color4?: string;\n  color5?: string;\n  stepsNumber?: number;\n} & GlobalParams;\n\nexport type SteppedSimplexNoiseProps = Omit<ShaderMountProps, 'fragmentShader'> & SteppedSimplexNoiseParams;\n\ntype SteppedSimplexNoisePreset = { name: string; params: Required<SteppedSimplexNoiseParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: SteppedSimplexNoisePreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    speed: 0.15,\n    seed: 0,\n    color1: 'hsla(208, 25%, 45%, 1)',\n    color2: 'hsla(94, 38%, 59%, 1)',\n    color3: 'hsla(359, 94%, 62%, 1)',\n    color4: 'hsla(42, 93%, 64%, 1)',\n    color5: 'hsla(0, 0%, 100%, 1)',\n    stepsNumber: 13,\n  },\n} as const;\n\nconst magmaPreset: SteppedSimplexNoisePreset = {\n  name: 'Magma',\n  params: {\n    scale: 0.3,\n    speed: 0.2,\n    seed: 0,\n    color1: 'hsla(0, 100%, 36%, 1)',\n    color2: 'hsla(0, 95%, 44%, 1)',\n    color3: 'hsla(20, 100%, 49%, 1)',\n    color4: 'hsla(45, 100%, 45%, 1)',\n    color5: 'hsla(31, 100%, 94%, 1)',\n    stepsNumber: 8,\n  },\n};\n\nconst bloodCellPreset: SteppedSimplexNoisePreset = {\n  name: 'Blood cell',\n  params: {\n    scale: 1.2,\n    speed: 0.22,\n    seed: 0,\n    color1: 'hsla(302, 43%, 13%, 1)',\n    color2: 'hsla(325, 93%, 17%, 1)',\n    color3: 'hsla(338, 80%, 25%, 1)',\n    color4: 'hsla(338, 80%, 25%, 1)',\n    color5: 'hsla(2, 85%, 72%, 1)',\n    stepsNumber: 29,\n  },\n};\n\nconst firstContactPreset: SteppedSimplexNoisePreset = {\n  name: 'First contact',\n  params: {\n    scale: 1.2,\n    speed: -0.1,\n    seed: 0,\n    color1: 'hsla(300, 43%, 82%, 1)',\n    color2: 'hsla(266, 70%, 9%, 1)',\n    color3: 'hsla(289, 36%, 26%, 1)',\n    color4: 'hsla(0, 41%, 78%, 1)',\n    color5: 'hsla(0, 100%, 96%, 1)',\n    stepsNumber: 40,\n  },\n};\n\nexport const steppedSimplexNoisePresets: SteppedSimplexNoisePreset[] = [\n  defaultPreset,\n  magmaPreset,\n  bloodCellPreset,\n  firstContactPreset,\n];\n\nexport const SteppedSimplexNoise = (props: SteppedSimplexNoiseProps): JSX.Element => {\n  const uniforms: SteppedSimplexNoiseUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_color3: getShaderColorFromString(props.color3, defaultPreset.params.color3),\n      u_color4: getShaderColorFromString(props.color4, defaultPreset.params.color4),\n      u_color5: getShaderColorFromString(props.color5, defaultPreset.params.color5),\n      u_steps_number: props.stepsNumber ?? defaultPreset.params.stepsNumber,\n    };\n  }, [props.scale, props.color1, props.color2, props.color3, props.color4, props.color5, props.stepsNumber]);\n\n  return <ShaderMount {...props} fragmentShader={steppedSimplexNoiseFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, metaballsFragmentShader, type MetaballsUniforms } from '@paper-design/shaders';\n\nexport type MetaballsParams = {\n  scale?: number;\n  color1?: string;\n  color2?: string;\n  color3?: string;\n  ballSize?: number;\n  visibilityRange?: number;\n} & GlobalParams;\n\nexport type MetaballsProps = Omit<ShaderMountProps, 'fragmentShader'> & MetaballsParams;\n\ntype MetaballsPreset = { name: string; params: Required<MetaballsParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: MetaballsPreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    speed: 0.6,\n    seed: 0,\n    color1: 'hsla(350, 90%, 55%, 1)',\n    color2: 'hsla(350, 80%, 60%, 1)',\n    color3: 'hsla(20, 85%, 70%, 1)',\n    ballSize: 1,\n    visibilityRange: 0.4,\n  },\n} as const;\n\nexport const metaballsPresets: MetaballsPreset[] = [defaultPreset];\n\nexport const Metaballs = (props: MetaballsProps): JSX.Element => {\n  const uniforms: MetaballsUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_color3: getShaderColorFromString(props.color3, defaultPreset.params.color3),\n      u_ballSize: props.ballSize ?? defaultPreset.params.ballSize,\n      u_visibilityRange: props.visibilityRange ?? defaultPreset.params.visibilityRange,\n    };\n  }, [props.scale, props.color1, props.color2, props.color3, props.ballSize, props.visibilityRange]);\n\n  return <ShaderMount {...props} fragmentShader={metaballsFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, wavesFragmentShader, type WavesUniforms } from '@paper-design/shaders';\n\nexport type WavesParams = {\n  scale?: number;\n  rotation?: number;\n  color1?: string;\n  color2?: string;\n  shape?: number;\n  frequency?: number;\n  amplitude?: number;\n  spacing?: number;\n  dutyCycle?: number;\n  edgeBlur?: number;\n};\n\nexport type WavesProps = Omit<ShaderMountProps, 'fragmentShader'> & WavesParams;\n\ntype WavesPreset = { name: string; params: Required<WavesParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: WavesPreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    rotation: 0,\n    color1: 'hsla(48, 100%, 74%, 1)',\n    color2: 'hsla(204, 47%, 45%, 1)',\n    shape: 1,\n    frequency: 0.5,\n    amplitude: 0.5,\n    spacing: 0.75,\n    dutyCycle: 0.2,\n    edgeBlur: 0,\n  },\n} as const;\n\nexport const spikesPreset: WavesPreset = {\n  name: 'Spikes',\n  params: {\n    scale: 2.3,\n    rotation: 0,\n    color1: 'hsla(65, 100%, 95%, 1)',\n    color2: 'hsla(290, 52%, 15%, 1)',\n    shape: 0,\n    frequency: 0.5,\n    amplitude: 0.9,\n    spacing: 0.37,\n    dutyCycle: 0.93,\n    edgeBlur: 0.15,\n  },\n} as const;\n\nexport const groovyPreset: WavesPreset = {\n  name: 'Groovy',\n  params: {\n    scale: 0.5,\n    rotation: 1,\n    color1: 'hsla(60, 100%, 97%, 1)',\n    color2: 'hsla(20, 100%, 71%, 1)',\n    shape: 2.37,\n    frequency: 0.2,\n    amplitude: 0.67,\n    spacing: 1.17,\n    dutyCycle: 0.57,\n    edgeBlur: 0,\n  },\n} as const;\n\nexport const tangledUpPreset: WavesPreset = {\n  name: 'Tangled up',\n  params: {\n    scale: 3.04,\n    rotation: 1,\n    color1: 'hsla(198.7, 66.7%, 14.1%, 1)',\n    color2: 'hsla(85.5, 35.7%, 78%, 1)',\n    shape: 3,\n    frequency: 0.44,\n    amplitude: 0.57,\n    spacing: 1.05,\n    dutyCycle: 0.97,\n    edgeBlur: 0,\n  },\n} as const;\n\nexport const zigZagPreset: WavesPreset = {\n  name: 'Zig zag',\n  params: {\n    scale: 2.7,\n    rotation: 1,\n    color1: 'hsla(0, 0%, 0%, 1)',\n    color2: 'hsla(0, 0%, 90%, 1)',\n    shape: 0,\n    frequency: 0.6,\n    amplitude: 0.8,\n    spacing: 0.5,\n    dutyCycle: 1,\n    edgeBlur: 0.5,\n  },\n} as const;\n\nexport const waveRidePreset: WavesPreset = {\n  name: 'Ride the wave',\n  params: {\n    scale: 0.84,\n    rotation: 0,\n    color1: 'hsla(65, 100%, 95%, 1)',\n    color2: 'hsla(0, 0%, 12%, 1)',\n    shape: 2.23,\n    frequency: 0.1,\n    amplitude: 0.6,\n    spacing: 0.41,\n    dutyCycle: 0.99,\n    edgeBlur: 0,\n  },\n} as const;\n\nexport const wavesPresets: WavesPreset[] = [\n  defaultPreset,\n  spikesPreset,\n  groovyPreset,\n  tangledUpPreset,\n  zigZagPreset,\n  waveRidePreset,\n];\n\nexport const Waves = (props: WavesProps): JSX.Element => {\n  const uniforms: WavesUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_rotation: props.rotation ?? defaultPreset.params.rotation,\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_shape: props.shape ?? defaultPreset.params.shape,\n      u_frequency: props.frequency ?? defaultPreset.params.frequency,\n      u_amplitude: props.amplitude ?? defaultPreset.params.amplitude,\n      u_spacing: props.spacing ?? defaultPreset.params.spacing,\n      u_dutyCycle: props.dutyCycle ?? defaultPreset.params.dutyCycle,\n      u_edgeBlur: props.edgeBlur ?? defaultPreset.params.edgeBlur,\n    };\n  }, [\n    props.scale,\n    props.rotation,\n    props.color1,\n    props.color2,\n    props.shape,\n    props.frequency,\n    props.amplitude,\n    props.spacing,\n    props.dutyCycle,\n    props.edgeBlur,\n  ]);\n\n  return <ShaderMount {...props} fragmentShader={wavesFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, perlinNoiseFragmentShader, type PerlinNoiseUniforms } from '@paper-design/shaders';\n\nexport type PerlinNoiseParams = {\n  scale?: number;\n  color1?: string;\n  color2?: string;\n  proportion?: number;\n  contour?: number;\n  octaveCount?: number;\n  persistence?: number;\n  lacunarity?: number;\n} & GlobalParams;\n\nexport type PerlinNoiseProps = Omit<ShaderMountProps, 'fragmentShader'> & PerlinNoiseParams;\n\ntype PerlinNoisePreset = { name: string; params: Required<PerlinNoiseParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: PerlinNoisePreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    speed: 0.5,\n    seed: 0,\n    color1: 'hsla(0, 0%, 15%, 1)',\n    color2: 'hsla(203, 100%, 87%, 1)',\n    proportion: 0.34,\n    contour: 0.9,\n    octaveCount: 2,\n    persistence: 1,\n    lacunarity: 1.5,\n  },\n};\n\nexport const preset1: PerlinNoisePreset = {\n  name: 'Nintendo Water',\n  params: {\n    scale: 0.2,\n    speed: 0.5,\n    seed: 0,\n    color1: 'hsla(220, 66%, 50%, 1)',\n    color2: 'hsla(155, 66%, 80%, 1)',\n    proportion: 0.42,\n    contour: 1,\n    octaveCount: 2,\n    persistence: 0.55,\n    lacunarity: 1.8,\n  },\n};\n\nexport const preset2: PerlinNoisePreset = {\n  name: 'Colony',\n  params: {\n    scale: 0.15,\n    speed: 0,\n    seed: 0,\n    color1: 'hsla(56, 86%, 81%, 1)',\n    color2: 'hsla(230, 80%, 20%, 1)',\n    octaveCount: 6,\n    persistence: 1,\n    lacunarity: 2.55,\n    proportion: 0.65,\n    contour: 0.65,\n  },\n};\n\nexport const preset3: PerlinNoisePreset = {\n  name: 'Phosphenes',\n  params: {\n    scale: 0.03,\n    speed: 0.15,\n    seed: 0,\n    color1: 'hsla(350, 80%, 70%, 1)',\n    color2: 'hsla(150, 50%, 60%, 1)',\n    proportion: 0.45,\n    contour: 0.55,\n    octaveCount: 6,\n    persistence: 0.3,\n    lacunarity: 3,\n  },\n} as const;\n\nexport const preset4: PerlinNoisePreset = {\n  name: 'Moss',\n  params: {\n    scale: 0.15,\n    speed: 0.02,\n    seed: 0,\n    color1: 'hsla(137, 100%, 51%, 1)',\n    color2: 'hsla(0, 0%, 15%, 1)',\n    proportion: 0.65,\n    contour: 0.65,\n    octaveCount: 6,\n    persistence: 1,\n    lacunarity: 2.55,\n  },\n} as const;\n\nexport const preset5: PerlinNoisePreset = {\n  name: 'Worms',\n  params: {\n    scale: 2,\n    speed: 0,\n    seed: 0,\n    color1: 'hsla(0, 100%, 100%, 1)',\n    color2: 'hsla(0, 0%, 35%, 1)',\n    proportion: 0.5,\n    contour: 1,\n    octaveCount: 1,\n    persistence: 1,\n    lacunarity: 1.5,\n  },\n} as const;\n\nexport const perlinNoisePresets: PerlinNoisePreset[] = [defaultPreset, preset1, preset2, preset3, preset4, preset5];\n\nexport const PerlinNoise = (props: PerlinNoiseProps): JSX.Element => {\n  const uniforms: PerlinNoiseUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_proportion: props.proportion ?? defaultPreset.params.proportion,\n      u_contour: props.contour ?? defaultPreset.params.contour,\n      u_octaveCount: props.octaveCount ?? defaultPreset.params.octaveCount,\n      u_persistence: props.persistence ?? defaultPreset.params.persistence,\n      u_lacunarity: props.lacunarity ?? defaultPreset.params.lacunarity,\n    };\n  }, [\n    props.scale,\n    props.color1,\n    props.color2,\n    props.proportion,\n    props.contour,\n    props.octaveCount,\n    props.persistence,\n    props.lacunarity,\n  ]);\n\n  return <ShaderMount {...props} fragmentShader={perlinNoiseFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport { getShaderColorFromString, voronoiFragmentShader, type VoronoiUniforms } from '@paper-design/shaders';\n\nexport type VoronoiParams = {\n  scale?: number;\n  colorCell1?: string;\n  colorCell2?: string;\n  colorCell3?: string;\n  colorMid?: string;\n  colorEdges?: string;\n  colorGradient?: number;\n  distance?: number;\n  edgesSize?: number;\n  edgesSharpness?: number;\n  middleSize?: number;\n  middleSharpness?: number;\n} & GlobalParams;\n\nexport type VoronoiProps = Omit<ShaderMountProps, 'fragmentShader'> & VoronoiParams;\n\ntype VoronoiPreset = { name: string; params: Required<VoronoiParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: VoronoiPreset = {\n  name: 'Default',\n  params: {\n    scale: 1.5,\n    speed: 0.5,\n    seed: 0,\n    colorCell1: 'hsla(15, 80%, 50%, 1)',\n    colorCell2: 'hsla(180, 80%, 50%, 1)',\n    colorCell3: 'hsla(200, 80%, 50%, 1)',\n    colorEdges: 'hsla(30, 90%, 10%, 1)',\n    colorMid: 'hsla(0, 0%, 0%, 1)',\n    colorGradient: 0.5,\n    distance: 0.25,\n    edgesSize: 0.15,\n    edgesSharpness: 0.01,\n    middleSize: 0,\n    middleSharpness: 0,\n  },\n} as const;\n\nexport const classicPreset: VoronoiPreset = {\n  name: 'Classic',\n  params: {\n    scale: 3,\n    speed: 0.8,\n    seed: 0,\n    colorCell1: 'hsla(0, 100%, 100%, 1)',\n    colorCell2: 'hsla(0, 0%, 100%, 1)',\n    colorCell3: 'hsla(0, 100%, 0%, 1)',\n    colorEdges: 'hsla(0, 0%, 0%, 1)',\n    colorMid: 'hsla(0, 0%, 0%, 1)',\n    colorGradient: 1,\n    distance: 0.45,\n    edgesSize: 0.02,\n    edgesSharpness: 0.07,\n    middleSize: 0,\n    middleSharpness: 0,\n  },\n} as const;\n\nexport const giraffePreset: VoronoiPreset = {\n  name: 'Giraffe',\n  params: {\n    scale: 1,\n    speed: 0.6,\n    seed: 0,\n    colorCell1: 'hsla(32, 100%, 18%, 1)',\n    colorCell2: 'hsla(42, 93%, 35%, 1)',\n    colorCell3: 'hsla(32, 100%, 18%, 1)',\n    colorEdges: 'hsla(45, 100%, 96%, 1)',\n    colorMid: 'hsla(0, 0%, 0%, 1)',\n    colorGradient: 1,\n    distance: 0.25,\n    edgesSize: 0.2,\n    edgesSharpness: 0.01,\n    middleSize: 0,\n    middleSharpness: 0.3,\n  },\n} as const;\n\nexport const eyesPreset: VoronoiPreset = {\n  name: 'Eyes',\n  params: {\n    scale: 1.6,\n    speed: 0.6,\n    seed: 0,\n    colorCell1: 'hsla(79, 84%, 60%, 1)',\n    colorCell2: 'hsla(207, 53%, 41%, 1)',\n    colorCell3: 'hsla(207, 80%, 65%, 1)',\n    colorMid: 'hsla(0, 0%, 0%, 1)',\n    colorEdges: 'hsla(0, 100%, 100%, 1)',\n    colorGradient: 1,\n    distance: 0.25,\n    edgesSize: 0.62,\n    edgesSharpness: 0.01,\n    middleSize: 0.1,\n    middleSharpness: 1,\n  },\n} as const;\n\nexport const bubblesPreset: VoronoiPreset = {\n  name: 'Bubbles',\n  params: {\n    scale: 2,\n    speed: 0.5,\n    seed: 0,\n    colorCell1: 'hsla(0, 100%, 50%, 1)',\n    colorCell2: 'hsla(169, 100%, 66%, 1)',\n    colorCell3: 'hsla(50, 100%, 66%, 1)',\n    colorMid: 'hsla(0, 0%, 0%, 1)',\n    colorEdges: 'hsla(0, 0%, 0%, 1)',\n    colorGradient: 1,\n    distance: 0.5,\n    edgesSize: 0.81,\n    edgesSharpness: 0.0,\n    middleSize: 0,\n    middleSharpness: 0.45,\n  },\n} as const;\n\nexport const cellsPreset: VoronoiPreset = {\n  name: 'Cells',\n  params: {\n    scale: 2,\n    speed: 1,\n    seed: 0,\n    colorCell1: 'hsla(0, 0%, 100%, 1)',\n    colorCell2: 'hsla(0, 0%, 100%, 1)',\n    colorCell3: 'hsla(0, 0%, 100%, 1)',\n    colorMid: 'hsla(0, 0%, 0%, 1)',\n    colorEdges: 'hsla(200, 50%, 15%, 1)',\n    colorGradient: 1,\n    distance: 0.38,\n    edgesSize: 0.1,\n    edgesSharpness: 0.02,\n    middleSize: 0,\n    middleSharpness: 0,\n  },\n} as const;\n\nexport const glowPreset: VoronoiPreset = {\n  name: 'Glow',\n  params: {\n    scale: 1.2,\n    speed: 0.8,\n    seed: 0,\n    colorCell1: 'hsla(40, 100%, 50%, 1)',\n    colorCell2: 'hsla(311, 100%, 59%, 1)',\n    colorCell3: 'hsla(180, 100%, 65%, 1)',\n    colorEdges: 'hsla(0, 100%, 0%, 1)',\n    colorMid: 'hsla(0, 0%, 100%, 1)',\n    colorGradient: 1,\n    distance: 0.25,\n    edgesSize: 0.15,\n    edgesSharpness: 0.01,\n    middleSize: 0.7,\n    middleSharpness: 0,\n  },\n} as const;\n\nexport const tilesPreset: VoronoiPreset = {\n  name: 'Tiles',\n  params: {\n    scale: 1.3,\n    speed: 1,\n    seed: 0,\n    colorCell1: 'hsla(80, 50%, 50%, 1)',\n    colorCell2: 'hsla(0, 50%, 100%, 1)',\n    colorCell3: 'hsla(200, 50%, 50%, 1)',\n    colorMid: 'hsla(0, 0%, 0%, 1)',\n    colorEdges: 'hsla(200, 50%, 10%, 1)',\n    colorGradient: 0,\n    distance: 0.05,\n    edgesSize: 0.25,\n    edgesSharpness: 0.02,\n    middleSize: 0,\n    middleSharpness: 0,\n  },\n} as const;\n\nexport const voronoiPresets: VoronoiPreset[] = [\n  defaultPreset,\n  classicPreset,\n  giraffePreset,\n  eyesPreset,\n  bubblesPreset,\n  cellsPreset,\n  glowPreset,\n  tilesPreset,\n];\n\nexport const Voronoi = (props: VoronoiProps): JSX.Element => {\n  const uniforms: VoronoiUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_colorCell1: getShaderColorFromString(props.colorCell1, defaultPreset.params.colorCell1),\n      u_colorCell2: getShaderColorFromString(props.colorCell2, defaultPreset.params.colorCell2),\n      u_colorCell3: getShaderColorFromString(props.colorCell3, defaultPreset.params.colorCell3),\n      u_colorMid: getShaderColorFromString(props.colorMid, defaultPreset.params.colorMid),\n      u_colorEdges: getShaderColorFromString(props.colorEdges, defaultPreset.params.colorEdges),\n      u_colorGradient: props.colorGradient ?? defaultPreset.params.colorGradient,\n      u_distance: props.distance ?? defaultPreset.params.distance,\n      u_edgesSize: props.edgesSize ?? defaultPreset.params.edgesSize,\n      u_edgesSharpness: props.edgesSharpness ?? defaultPreset.params.edgesSharpness,\n      u_middleSize: props.middleSize ?? defaultPreset.params.middleSize,\n      u_middleSharpness: props.middleSharpness ?? defaultPreset.params.middleSharpness,\n    };\n  }, [\n    props.scale,\n    props.colorCell1,\n    props.colorCell3,\n    props.colorCell2,\n    props.colorMid,\n    props.colorEdges,\n    props.colorGradient,\n    props.distance,\n    props.edgesSize,\n    props.edgesSharpness,\n    props.middleSize,\n    props.middleSharpness,\n  ]);\n\n  return <ShaderMount {...props} fragmentShader={voronoiFragmentShader} uniforms={uniforms} />;\n};\n", "import { useMemo } from 'react';\nimport { ShaderMount, type GlobalParams, type ShaderMountProps } from '../shader-mount';\nimport {\n  getShaderColorFromString,\n  warpFragmentShader,\n  type WarpUniforms,\n  type PatternShape,\n  PatternShapes,\n} from '@paper-design/shaders';\n\nexport type WarpParams = {\n  scale?: number;\n  rotation?: number;\n  color1?: string;\n  color2?: string;\n  color3?: string;\n  proportion?: number;\n  softness?: number;\n  distortion?: number;\n  swirl?: number;\n  swirlIterations?: number;\n  shapeScale?: number;\n  shape?: PatternShape;\n} & GlobalParams;\n\nexport type WarpProps = Omit<ShaderMountProps, 'fragmentShader'> & WarpParams;\n\ntype WarpPreset = { name: string; params: Required<WarpParams> };\n\n// Due to Leva controls limitation:\n// 1) keep default colors in HSLA format to keep alpha channel\n// 2) don't use decimal values on HSL values (to avoid button highlight bug)\n\nexport const defaultPreset: WarpPreset = {\n  name: 'Default',\n  params: {\n    scale: 1,\n    rotation: 0,\n    speed: 0.1,\n    seed: 0,\n    color1: 'hsla(0, 0%, 15%, 1)',\n    color2: 'hsla(203, 80%, 70%, 1)',\n    color3: 'hsla(0, 0%, 100%, 1)',\n    proportion: 0.35,\n    softness: 1,\n    distortion: 0.25,\n    swirl: 0.8,\n    swirlIterations: 10,\n    shapeScale: 0.1,\n    shape: PatternShapes.Checks,\n  },\n};\n\nexport const presetCauldron: WarpPreset = {\n  name: 'Cauldron Pot',\n  params: {\n    scale: 1.1,\n    rotation: 1.62,\n    speed: 1,\n    seed: 0,\n    color1: 'hsla(100, 51%, 75%, 1)',\n    color2: 'hsla(220, 39%, 32%, 1)',\n    color3: 'hsla(129.2, 41.9%, 6.1%, 1)',\n    proportion: 0.64,\n    softness: 0.95,\n    distortion: 0.2,\n    swirl: 0.86,\n    swirlIterations: 7,\n    shapeScale: 0,\n    shape: PatternShapes.Edge,\n  },\n};\n\nexport const presetSilk: WarpPreset = {\n  name: 'Silk',\n  params: {\n    scale: 0.26,\n    rotation: 0,\n    speed: 0.5,\n    seed: 0,\n    color1: 'hsla(0, 9%, 7%, 1)',\n    color2: 'hsla(8, 13%, 34%, 1)',\n    color3: 'hsla(5, 8%, 71%, 1)',\n    proportion: 0,\n    softness: 1,\n    distortion: 0.3,\n    swirl: 0.6,\n    swirlIterations: 11,\n    shapeScale: 0.05,\n    shape: PatternShapes.Stripes,\n  },\n};\n\nexport const presetPassion: WarpPreset = {\n  name: 'Passion',\n  params: {\n    scale: 0.25,\n    rotation: 1.35,\n    speed: 0.3,\n    seed: 0,\n    color1: 'hsla(0, 44.7%, 14.9%, 1)',\n    color2: 'hsla(353.4, 34%, 42.2%, 1)',\n    color3: 'hsla(29, 100%, 76.1%, 1)',\n    proportion: 0.5,\n    softness: 1,\n    distortion: 0.09,\n    swirl: 0.9,\n    swirlIterations: 6,\n    shapeScale: 0.25,\n    shape: PatternShapes.Checks,\n  },\n};\n\nexport const presetPhantom: WarpPreset = {\n  name: 'Phantom',\n  params: {\n    scale: 0.68,\n    rotation: 1.8,\n    speed: 1.25,\n    seed: 0,\n    color1: 'hsla(242.2, 44.3%, 12%, 1)',\n    color2: 'hsla(236.1, 80.4%, 70%, 1)',\n    color3: 'hsla(0, 0%, 100%, 1)',\n    proportion: 0.45,\n    softness: 1,\n    distortion: 0.16,\n    swirl: 0.3,\n    swirlIterations: 7,\n    shapeScale: 0.1,\n    shape: PatternShapes.Checks,\n  },\n};\n\nexport const presetAbyss: WarpPreset = {\n  name: 'The Abyss',\n  params: {\n    scale: 0.1,\n    rotation: 2,\n    speed: 0.06,\n    seed: 0,\n    color1: 'hsla(242.2, 44.3%, 12%, 1)',\n    color2: 'hsla(236.1, 80.4%, 70%, 1)',\n    color3: 'hsla(0, 0%, 100%, 1)',\n    proportion: 0,\n    softness: 1,\n    distortion: 0.09,\n    swirl: 0.48,\n    swirlIterations: 4,\n    shapeScale: 0.1,\n    shape: PatternShapes.Edge,\n  },\n};\n\nexport const presetInk: WarpPreset = {\n  name: 'Live Ink',\n  params: {\n    scale: 2,\n    rotation: 1.5,\n    speed: 0.25,\n    seed: 0,\n    color1: 'hsla(210, 11.1%, 7.1%, 1)',\n    color2: 'hsla(165, 9%, 65.1%, 1)',\n    color3: 'hsla(84, 100%, 97.1%, 1)',\n    proportion: 0.35,\n    softness: 0.3,\n    distortion: 0.25,\n    swirl: 0.8,\n    swirlIterations: 10,\n    shapeScale: 0.26,\n    shape: PatternShapes.Checks,\n  },\n};\n\nexport const presetIceberg: WarpPreset = {\n  name: 'Iceberg',\n  params: {\n    scale: 1.1,\n    rotation: 2,\n    speed: 0.05,\n    seed: 0,\n    color1: 'hsla(0, 0%, 100%, 1)',\n    color2: 'hsla(220, 38.7%, 32%, 1)',\n    color3: 'hsla(129.2, 41.9%, 6.1%, 1)',\n    proportion: 0.3,\n    softness: 1,\n    distortion: 0.2,\n    swirl: 0.86,\n    swirlIterations: 7,\n    shapeScale: 0,\n    shape: PatternShapes.Checks,\n  },\n};\n\nexport const presetNectar: WarpPreset = {\n  name: 'Nectar',\n  params: {\n    scale: 0.24,\n    rotation: 0,\n    speed: 0.42,\n    seed: 0,\n    color1: 'hsla(37.5, 22.2%, 7.1%, 1)',\n    color2: 'hsla(38.5, 59.1%, 63.1%, 1)',\n    color3: 'hsla(37.6, 30%, 95.2%, 1)',\n    proportion: 0.24,\n    softness: 1,\n    distortion: 0.21,\n    swirl: 0.57,\n    swirlIterations: 10,\n    shapeScale: 0.32,\n    shape: PatternShapes.Edge,\n  },\n};\n\nexport const presetFilteredLight: WarpPreset = {\n  name: 'Filtered Light',\n  params: {\n    scale: 2,\n    rotation: 0.44,\n    speed: 0.32,\n    seed: 0,\n    color1: 'hsla(60.2, 7.8%, 8.3%, 1)',\n    color2: 'hsla(64.4, 27.8%, 81%, 1)',\n    color3: 'hsla(60, 100%, 93.9%, 1)',\n    proportion: 0.25,\n    softness: 1,\n    distortion: 0.06,\n    swirl: 0,\n    swirlIterations: 0,\n    shapeScale: 0,\n    shape: PatternShapes.Stripes\n  },\n};\n\nexport const presetKelp: WarpPreset = {\n  name: 'Kelp',\n  params: {\n    scale: 0.38,\n    rotation: 0.6,\n    speed: 2,\n    seed: 0,\n    color1: 'hsla(79.3, 100%, 78%, 1)',\n    color2: 'hsla(112, 10.5%, 28%, 1)',\n    color3: 'hsla(203.3, 50%, 7.1%, 1)',\n    proportion: 1,\n    softness: 0,\n    distortion: 0,\n    swirl: 0.15,\n    swirlIterations: 0,\n    shapeScale: 0.74,\n    shape: PatternShapes.Stripes\n  },\n};\n\n\n\nexport const warpPresets: WarpPreset[] = [\n  defaultPreset,\n  presetAbyss,\n  presetCauldron,\n  presetFilteredLight,\n  presetIceberg,\n  presetInk,\n  presetKelp,\n  presetNectar,\n  presetPassion,\n  presetPhantom,\n  presetSilk,\n];\n\nexport const Warp = (props: WarpProps): JSX.Element => {\n  const uniforms: WarpUniforms = useMemo(() => {\n    return {\n      u_scale: props.scale ?? defaultPreset.params.scale,\n      u_rotation: props.rotation ?? defaultPreset.params.rotation,\n      u_color1: getShaderColorFromString(props.color1, defaultPreset.params.color1),\n      u_color2: getShaderColorFromString(props.color2, defaultPreset.params.color2),\n      u_color3: getShaderColorFromString(props.color3, defaultPreset.params.color2),\n      u_proportion: props.proportion ?? defaultPreset.params.proportion,\n      u_softness: props.softness ?? defaultPreset.params.softness,\n      u_distortion: props.distortion ?? defaultPreset.params.distortion,\n      u_swirl: props.swirl ?? defaultPreset.params.swirl,\n      u_swirlIterations: props.swirlIterations ?? defaultPreset.params.swirlIterations,\n      u_shapeScale: props.shapeScale ?? defaultPreset.params.shapeScale,\n      u_shape: props.shape ?? defaultPreset.params.shape,\n    };\n  }, [\n    props.scale,\n    props.rotation,\n    props.color1,\n    props.color2,\n    props.color3,\n    props.proportion,\n    props.softness,\n    props.distortion,\n    props.swirl,\n    props.swirlIterations,\n    props.shapeScale,\n    props.shape,\n  ]);\n\n  return <ShaderMount {...props} fragmentShader={warpFragmentShader} uniforms={uniforms} />;\n};\n"],
  "mappings": ";AAAA,OAAgB,aAAAA,EAAW,UAAAC,MAAc,QACzC,OAAS,eAAeC,MAA0B,wBAwDzC,cAAAC,MAAA,oBAzCF,IAAMC,EAA0C,CAAC,CACtD,IAAAC,EACA,eAAAC,EACA,MAAAC,EACA,SAAAC,EAAW,CAAC,EACZ,uBAAAC,EACA,MAAAC,EAAQ,EACR,KAAAC,EAAO,CACT,IAAM,CACJ,IAAMC,EAAYP,GAAOJ,EAA0B,IAAI,EACjDY,EAAiBZ,EAAkC,IAAI,EAE7D,OAAAD,EAAU,KACJY,EAAU,UACZC,EAAe,QAAU,IAAIX,EAC3BU,EAAU,QACVN,EACAE,EACAC,EACAC,EACAC,CACF,GAGK,IAAM,CACXE,EAAe,SAAS,QAAQ,CAClC,GACC,CAACP,EAAgBG,CAAsB,CAAC,EAE3CT,EAAU,IAAM,CACda,EAAe,SAAS,YAAYL,CAAQ,CAC9C,EAAG,CAACA,CAAQ,CAAC,EAEbR,EAAU,IAAM,CACda,EAAe,SAAS,SAASH,CAAK,CACxC,EAAG,CAACA,CAAK,CAAC,EAEVV,EAAU,IAAM,CACda,EAAe,SAAS,QAAQF,CAAI,CACtC,EAAG,CAACA,CAAI,CAAC,EAEFR,EAAC,UAAO,IAAKS,EAAW,MAAOL,EAAO,CAC/C,EC1DA,OAAS,WAAAO,MAAe,QAExB,OAAS,4BAAAC,EAA0B,6BAAAC,MAA2D,wBAqDrF,cAAAC,MAAA,oBApCF,IAAMC,EAAmC,CAC9C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,GACP,KAAM,EACN,OAAQ,qBACR,OAAQ,uBACR,YAAa,CACf,CACF,EAEaC,EAA+B,CAC1C,KAAM,MACN,OAAQ,CACN,MAAO,EACP,MAAO,GACP,KAAM,EACN,OAAQ,0BACR,OAAQ,uBACR,YAAa,CACf,CACF,EAEaC,EAA0C,CAACF,EAAeC,CAAS,EAEnEE,EAAeC,GAAyC,CACnE,IAAMC,EAAgCC,EAAQ,KACrC,CACL,QAASF,EAAM,OAASJ,EAAc,OAAO,MAC7C,SAAUH,EAAyBO,EAAM,OAAQJ,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBO,EAAM,OAAQJ,EAAc,OAAO,MAAM,EAC5E,cAAeI,EAAM,aAAeJ,EAAc,OAAO,WAC3D,GACC,CAACI,EAAM,MAAOA,EAAM,OAAQA,EAAM,OAAQA,EAAM,WAAW,CAAC,EAE/D,OAAOL,EAACQ,EAAA,CAAa,GAAGH,EAAO,eAAgBN,EAA2B,SAAUO,EAAU,CAChG,EC/CA,YAAyC,wBCTzC,OAAS,WAAAG,MAAe,QAExB,OAAS,4BAAAC,EAA0B,8BAAAC,MAA6D,wBAiEvF,cAAAC,MAAA,oBAhDF,IAAMC,EAAoC,CAC/C,KAAM,UACN,OAAQ,CACN,MAAO,IACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,OAAQ,wBACR,OAAQ,wBACV,CACF,EAEaC,EAAkC,CAC7C,KAAM,QACN,OAAQ,CACN,MAAO,GACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,OAAQ,wBACR,OAAQ,uBACV,CACF,EAEaC,EAAkC,CAC7C,KAAM,QACN,OAAQ,CACN,MAAO,IACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,OAAQ,yBACR,OAAQ,wBACV,CACF,EAEaC,EAA4C,CAACH,EAAeC,EAAaC,CAAW,EAEpFE,EAAgBC,GAA0C,CACrE,IAAMC,EAAiCC,EAAQ,KACtC,CACL,SAAUV,EAAyBQ,EAAM,OAAQL,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBQ,EAAM,OAAQL,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBQ,EAAM,OAAQL,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBQ,EAAM,OAAQL,EAAc,OAAO,MAAM,CAC9E,GACC,CAACK,EAAM,OAAQA,EAAM,OAAQA,EAAM,OAAQA,EAAM,MAAM,CAAC,EAE3D,OAAON,EAACS,EAAA,CAAa,GAAGH,EAAO,eAAgBP,EAA4B,SAAUQ,EAAU,CACjG,EDrDA,YAA0C,wBEf1C,OAAS,WAAAG,MAAe,QAExB,OAAS,4BAAAC,EAA0B,2BAAAC,OAAuD,wBA6GjF,cAAAC,OAAA,oBA1FF,IAAMC,EAAiC,CAC5C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,UAAW,wBACX,WAAY,uBACZ,WAAY,0BACZ,WAAY,IACZ,UAAW,GACb,CACF,EAEaC,GAA+B,CAC1C,KAAM,QACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,UAAW,0BACX,WAAY,uBACZ,WAAY,uBACZ,WAAY,IACZ,UAAW,EACb,CACF,EAEaC,GAA8B,CACzC,KAAM,OACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,UAAW,wBACX,WAAY,yBACZ,WAAY,wBACZ,WAAY,IACZ,UAAW,GACb,CACF,EAEaC,GAAkC,CAC7C,KAAM,WACN,OAAQ,CACN,MAAO,EACP,MAAO,IACP,KAAM,EACN,UAAW,uBACX,WAAY,yBACZ,WAAY,yBACZ,WAAY,IACZ,UAAW,EACb,CACF,EAEaC,GAAgC,CAC3C,KAAM,SACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,UAAW,yBACX,WAAY,yBACZ,WAAY,0BACZ,WAAY,EACZ,UAAW,EACb,CACF,EAEaC,GAAsC,CACjDL,EACAC,GACAC,GACAC,GACAC,EACF,EAEaE,GAAaC,GAAuC,CAC/D,IAAMC,EAA8BC,EAAQ,KACnC,CACL,QAASF,EAAM,OAASP,EAAc,OAAO,MAC7C,YAAaH,EAAyBU,EAAM,UAAWP,EAAc,OAAO,SAAS,EACrF,aAAcH,EAAyBU,EAAM,WAAYP,EAAc,OAAO,UAAU,EACxF,aAAcH,EAAyBU,EAAM,WAAYP,EAAc,OAAO,UAAU,EACxF,aAAcO,EAAM,YAAcP,EAAc,OAAO,WACvD,YAAaO,EAAM,WAAaP,EAAc,OAAO,SACvD,GACC,CAACO,EAAM,MAAOA,EAAM,UAAWA,EAAM,WAAYA,EAAM,WAAYA,EAAM,WAAYA,EAAM,SAAS,CAAC,EAExG,OAAOR,GAACW,EAAA,CAAa,GAAGH,EAAO,eAAgBT,GAAyB,SAAUU,EAAU,CAC9F,EF3FA,YAAuC,wBGrBvC,OAAS,WAAAG,OAAe,QAExB,OAAS,4BAAAC,EAA0B,4BAAAC,OAAyD,wBAqDnF,cAAAC,OAAA,oBApCF,IAAMC,EAAkC,CAC7C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,WAAY,0BACZ,UAAW,qBACX,WAAY,GACd,CACF,EAEMC,GAAiC,CACrC,KAAM,SACN,OAAQ,CACN,MAAO,GACP,MAAO,EACP,KAAM,EACN,WAAY,yBACZ,UAAW,sBACX,WAAY,GACd,CACF,EAEaC,GAAwC,CAACF,EAAeC,EAAY,EAEpEE,GAAcC,GAAwC,CACjE,IAAMC,EAA+BC,GAAQ,KACpC,CACL,QAASF,EAAM,OAASJ,EAAc,OAAO,MAC7C,aAAcH,EAAyBO,EAAM,WAAYJ,EAAc,OAAO,UAAU,EACxF,YAAaH,EAAyBO,EAAM,UAAWJ,EAAc,OAAO,SAAS,EACrF,aAAcI,EAAM,YAAcJ,EAAc,OAAO,UACzD,GACC,CAACI,EAAM,MAAOA,EAAM,WAAYA,EAAM,UAAWA,EAAM,UAAU,CAAC,EAErE,OAAOL,GAACQ,EAAA,CAAa,GAAGH,EAAO,eAAgBN,GAA0B,SAAUO,EAAU,CAC/F,EH7BA,YAAwC,wBI3BxC,OAAS,WAAAG,OAAe,QAExB,OAAS,4BAAAC,EAA0B,2BAAAC,OAAuD,wBA8DjF,cAAAC,OAAA,oBAzCF,IAAMC,EAAiC,CAC5C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,OAAQ,wBACR,OAAQ,yBACR,QAAS,GACT,aAAc,GACd,UAAW,CACb,CACF,EAEaC,GAAsC,CAACD,CAAa,EAEpDE,GAAaC,GAAuC,CAC/D,IAAMC,EAA8BC,GAAQ,KACnC,CACL,QAASF,EAAM,OAASH,EAAc,OAAO,MAC7C,SAAUH,EAAyBM,EAAM,OAAQH,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBM,EAAM,OAAQH,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBM,EAAM,OAAQH,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBM,EAAM,OAAQH,EAAc,OAAO,MAAM,EAC5E,UAAWG,EAAM,SAAWH,EAAc,OAAO,QACjD,eAAgBG,EAAM,cAAgBH,EAAc,OAAO,aAC3D,YAAaG,EAAM,WAAaH,EAAc,OAAO,SACvD,GACC,CACDG,EAAM,MACNA,EAAM,OACNA,EAAM,OACNA,EAAM,OACNA,EAAM,OACNA,EAAM,QACNA,EAAM,aACNA,EAAM,SACR,CAAC,EAED,OAAOJ,GAACO,EAAA,CAAa,GAAGH,EAAO,eAAgBL,GAAyB,SAAUM,EAAU,CAC9F,EJhCA,YAAuC,wBKjCvC,OAAS,WAAAG,OAAe,QAExB,OACE,0BAAAC,GACA,4BAAAC,EAGA,kBAAAC,MACK,wBA6LE,cAAAC,OAAA,oBAtKF,IAAMC,EAAgC,CAC3C,KAAM,UACN,OAAQ,CACN,UAAW,yBACX,UAAW,yBACX,YAAa,wBACb,QAAS,EACT,aAAc,GACd,aAAc,GACd,YAAa,EACb,UAAW,EACX,aAAc,EACd,MAAOF,EAAe,MACxB,CACF,EAEMG,GAAkC,CACtC,KAAM,YACN,OAAQ,CACN,UAAW,uBACX,UAAW,uBACX,YAAa,sBACb,QAAS,EACT,aAAc,GACd,aAAc,GACd,YAAa,EACb,UAAW,EACX,aAAc,EACd,MAAOH,EAAe,QACxB,CACF,EAEMI,GAAgC,CACpC,KAAM,UACN,OAAQ,CACN,UAAW,2BACX,UAAW,0BACX,YAAa,uBACb,QAAS,GACT,aAAc,GACd,aAAc,GACd,YAAa,GACb,UAAW,GACX,aAAc,IACd,MAAOJ,EAAe,MACxB,CACF,EAEMK,GAAiC,CACrC,KAAM,YACN,OAAQ,CACN,UAAW,4BACX,UAAW,yBACX,YAAa,qBACb,QAAS,EACT,aAAc,GACd,aAAc,GACd,YAAa,EACb,UAAW,EACX,aAAc,GACd,MAAOL,EAAe,MACxB,CACF,EAEMM,GAAiC,CACrC,KAAM,WACN,OAAQ,CACN,UAAW,qBACX,UAAW,wBACX,YAAa,qBACb,QAAS,GACT,aAAc,GACd,aAAc,GACd,YAAa,EACb,UAAW,EACX,aAAc,EACd,MAAON,EAAe,OACxB,CACF,EAEMO,GAAkC,CACtC,KAAM,YACN,OAAQ,CACN,UAAW,yBACX,UAAW,qBACX,YAAa,wBACb,QAAS,EACT,aAAc,GACd,aAAc,GACd,YAAa,EACb,UAAW,EACX,aAAc,EACd,MAAOP,EAAe,OACxB,CACF,EAEMQ,GAA+B,CACnC,KAAM,mBACN,OAAQ,CACN,UAAW,uBACX,UAAW,0BACX,YAAa,yBACb,QAAS,EACT,aAAc,GACd,aAAc,GACd,YAAa,GACb,UAAW,IACX,aAAc,EACd,MAAOR,EAAe,QACxB,CACF,EAEMS,GAAiC,CACrC,KAAM,WACN,OAAQ,CACN,UAAW,yBACX,UAAW,yBACX,YAAa,qBACb,QAAS,IACT,aAAc,EACd,aAAc,IACd,YAAa,EACb,UAAW,EACX,aAAc,EACd,MAAOT,EAAe,MACxB,CACF,EAEaU,GAAoC,CAC/CR,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACF,EAEaE,GAAYC,GAAsC,CAC7D,IAAMC,EAA6BC,GAAQ,KAClC,CACL,YAAaf,EAAyBa,EAAM,UAAWV,EAAc,OAAO,SAAS,EACrF,YAAaH,EAAyBa,EAAM,UAAWV,EAAc,OAAO,WAAW,EACvF,cAAeH,EAAyBa,EAAM,YAAaV,EAAc,OAAO,WAAW,EAC3F,UAAWU,EAAM,SAAWV,EAAc,OAAO,QACjD,eAAgBU,EAAM,cAAgBV,EAAc,OAAO,aAC3D,eAAgBU,EAAM,cAAgBV,EAAc,OAAO,aAC3D,cAAeU,EAAM,aAAeV,EAAc,OAAO,YACzD,YAAaU,EAAM,WAAaV,EAAc,OAAO,UACrD,eAAgBU,EAAM,cAAgBV,EAAc,OAAO,aAC3D,QAASU,EAAM,OAASV,EAAc,OAAO,KAC/C,GACC,CACDU,EAAM,UACNA,EAAM,UACNA,EAAM,YACNA,EAAM,QACNA,EAAM,aACNA,EAAM,aACNA,EAAM,YACNA,EAAM,UACNA,EAAM,aACNA,EAAM,KACR,CAAC,EAED,OAAOX,GAACc,EAAA,CAAa,GAAGH,EAAO,eAAgBd,GAAwB,SAAUe,EAAU,CAC7F,EL/JA,OAAgC,kBAAAG,OAA0C,wBMvC1E,OAAS,WAAAC,OAAe,QAExB,OACE,4BAAAC,EACA,qCAAAC,OAEK,wBAoGE,cAAAC,OAAA,oBAhFF,IAAMC,EAA2C,CACtD,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,IACP,KAAM,EACN,OAAQ,yBACR,OAAQ,wBACR,OAAQ,yBACR,OAAQ,wBACR,OAAQ,uBACR,YAAa,EACf,CACF,EAEMC,GAAyC,CAC7C,KAAM,QACN,OAAQ,CACN,MAAO,GACP,MAAO,GACP,KAAM,EACN,OAAQ,wBACR,OAAQ,uBACR,OAAQ,yBACR,OAAQ,yBACR,OAAQ,yBACR,YAAa,CACf,CACF,EAEMC,GAA6C,CACjD,KAAM,aACN,OAAQ,CACN,MAAO,IACP,MAAO,IACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,OAAQ,yBACR,OAAQ,yBACR,OAAQ,uBACR,YAAa,EACf,CACF,EAEMC,GAAgD,CACpD,KAAM,gBACN,OAAQ,CACN,MAAO,IACP,MAAO,IACP,KAAM,EACN,OAAQ,yBACR,OAAQ,wBACR,OAAQ,yBACR,OAAQ,uBACR,OAAQ,wBACR,YAAa,EACf,CACF,EAEaC,GAA0D,CACrEJ,EACAC,GACAC,GACAC,EACF,EAEaE,GAAuBC,GAAiD,CACnF,IAAMC,EAAwCC,GAAQ,KAC7C,CACL,QAASF,EAAM,OAASN,EAAc,OAAO,MAC7C,SAAUH,EAAyBS,EAAM,OAAQN,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBS,EAAM,OAAQN,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBS,EAAM,OAAQN,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBS,EAAM,OAAQN,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBS,EAAM,OAAQN,EAAc,OAAO,MAAM,EAC5E,eAAgBM,EAAM,aAAeN,EAAc,OAAO,WAC5D,GACC,CAACM,EAAM,MAAOA,EAAM,OAAQA,EAAM,OAAQA,EAAM,OAAQA,EAAM,OAAQA,EAAM,OAAQA,EAAM,WAAW,CAAC,EAEzG,OAAOP,GAACU,EAAA,CAAa,GAAGH,EAAO,eAAgBR,GAAmC,SAAUS,EAAU,CACxG,EN9DA,YAAiD,wBO7CjD,OAAS,WAAAG,OAAe,QAExB,OAAS,4BAAAC,EAA0B,2BAAAC,OAAuD,wBA+CjF,cAAAC,OAAA,oBA5BF,IAAMC,EAAiC,CAC5C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,GACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,OAAQ,wBACR,SAAU,EACV,gBAAiB,EACnB,CACF,EAEaC,GAAsC,CAACD,CAAa,EAEpDE,GAAaC,GAAuC,CAC/D,IAAMC,EAA8BC,GAAQ,KACnC,CACL,QAASF,EAAM,OAASH,EAAc,OAAO,MAC7C,SAAUH,EAAyBM,EAAM,OAAQH,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBM,EAAM,OAAQH,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBM,EAAM,OAAQH,EAAc,OAAO,MAAM,EAC5E,WAAYG,EAAM,UAAYH,EAAc,OAAO,SACnD,kBAAmBG,EAAM,iBAAmBH,EAAc,OAAO,eACnE,GACC,CAACG,EAAM,MAAOA,EAAM,OAAQA,EAAM,OAAQA,EAAM,OAAQA,EAAM,SAAUA,EAAM,eAAe,CAAC,EAEjG,OAAOJ,GAACO,EAAA,CAAa,GAAGH,EAAO,eAAgBL,GAAyB,SAAUM,EAAU,CAC9F,EPCA,YAAuC,wBQnDvC,OAAS,WAAAG,OAAe,QAExB,OAAS,4BAAAC,EAA0B,uBAAAC,OAA+C,wBA2JzE,cAAAC,OAAA,oBApIF,IAAMC,EAA6B,CACxC,KAAM,UACN,OAAQ,CACN,MAAO,EACP,SAAU,EACV,OAAQ,yBACR,OAAQ,yBACR,MAAO,EACP,UAAW,GACX,UAAW,GACX,QAAS,IACT,UAAW,GACX,SAAU,CACZ,CACF,EAEaC,GAA4B,CACvC,KAAM,SACN,OAAQ,CACN,MAAO,IACP,SAAU,EACV,OAAQ,yBACR,OAAQ,yBACR,MAAO,EACP,UAAW,GACX,UAAW,GACX,QAAS,IACT,UAAW,IACX,SAAU,GACZ,CACF,EAEaC,GAA4B,CACvC,KAAM,SACN,OAAQ,CACN,MAAO,GACP,SAAU,EACV,OAAQ,yBACR,OAAQ,yBACR,MAAO,KACP,UAAW,GACX,UAAW,IACX,QAAS,KACT,UAAW,IACX,SAAU,CACZ,CACF,EAEaC,GAA+B,CAC1C,KAAM,aACN,OAAQ,CACN,MAAO,KACP,SAAU,EACV,OAAQ,+BACR,OAAQ,4BACR,MAAO,EACP,UAAW,IACX,UAAW,IACX,QAAS,KACT,UAAW,IACX,SAAU,CACZ,CACF,EAEaC,GAA4B,CACvC,KAAM,UACN,OAAQ,CACN,MAAO,IACP,SAAU,EACV,OAAQ,qBACR,OAAQ,sBACR,MAAO,EACP,UAAW,GACX,UAAW,GACX,QAAS,GACT,UAAW,EACX,SAAU,EACZ,CACF,EAEaC,GAA8B,CACzC,KAAM,gBACN,OAAQ,CACN,MAAO,IACP,SAAU,EACV,OAAQ,yBACR,OAAQ,sBACR,MAAO,KACP,UAAW,GACX,UAAW,GACX,QAAS,IACT,UAAW,IACX,SAAU,CACZ,CACF,EAEaC,GAA8B,CACzCN,EACAC,GACAC,GACAC,GACAC,GACAC,EACF,EAEaE,GAASC,GAAmC,CACvD,IAAMC,EAA0BC,GAAQ,KAC/B,CACL,QAASF,EAAM,OAASR,EAAc,OAAO,MAC7C,WAAYQ,EAAM,UAAYR,EAAc,OAAO,SACnD,SAAUH,EAAyBW,EAAM,OAAQR,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBW,EAAM,OAAQR,EAAc,OAAO,MAAM,EAC5E,QAASQ,EAAM,OAASR,EAAc,OAAO,MAC7C,YAAaQ,EAAM,WAAaR,EAAc,OAAO,UACrD,YAAaQ,EAAM,WAAaR,EAAc,OAAO,UACrD,UAAWQ,EAAM,SAAWR,EAAc,OAAO,QACjD,YAAaQ,EAAM,WAAaR,EAAc,OAAO,UACrD,WAAYQ,EAAM,UAAYR,EAAc,OAAO,QACrD,GACC,CACDQ,EAAM,MACNA,EAAM,SACNA,EAAM,OACNA,EAAM,OACNA,EAAM,MACNA,EAAM,UACNA,EAAM,UACNA,EAAM,QACNA,EAAM,UACNA,EAAM,QACR,CAAC,EAED,OAAOT,GAACY,EAAA,CAAa,GAAGH,EAAO,eAAgBV,GAAqB,SAAUW,EAAU,CAC1F,ERrGA,YAAmC,wBSzDnC,OAAS,WAAAG,OAAe,QAExB,OAAS,4BAAAC,EAA0B,6BAAAC,OAA2D,wBA8IrF,cAAAC,OAAA,oBAzHF,IAAMC,EAAmC,CAC9C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,GACP,KAAM,EACN,OAAQ,sBACR,OAAQ,0BACR,WAAY,IACZ,QAAS,GACT,YAAa,EACb,YAAa,EACb,WAAY,GACd,CACF,EAEaC,GAA6B,CACxC,KAAM,iBACN,OAAQ,CACN,MAAO,GACP,MAAO,GACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,WAAY,IACZ,QAAS,EACT,YAAa,EACb,YAAa,IACb,WAAY,GACd,CACF,EAEaC,GAA6B,CACxC,KAAM,SACN,OAAQ,CACN,MAAO,IACP,MAAO,EACP,KAAM,EACN,OAAQ,wBACR,OAAQ,yBACR,YAAa,EACb,YAAa,EACb,WAAY,KACZ,WAAY,IACZ,QAAS,GACX,CACF,EAEaC,GAA6B,CACxC,KAAM,aACN,OAAQ,CACN,MAAO,IACP,MAAO,IACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,WAAY,IACZ,QAAS,IACT,YAAa,EACb,YAAa,GACb,WAAY,CACd,CACF,EAEaC,GAA6B,CACxC,KAAM,OACN,OAAQ,CACN,MAAO,IACP,MAAO,IACP,KAAM,EACN,OAAQ,0BACR,OAAQ,sBACR,WAAY,IACZ,QAAS,IACT,YAAa,EACb,YAAa,EACb,WAAY,IACd,CACF,EAEaC,GAA6B,CACxC,KAAM,QACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,OAAQ,yBACR,OAAQ,sBACR,WAAY,GACZ,QAAS,EACT,YAAa,EACb,YAAa,EACb,WAAY,GACd,CACF,EAEaC,GAA0C,CAACN,EAAeC,GAASC,GAASC,GAASC,GAASC,EAAO,EAErGE,GAAeC,GAAyC,CACnE,IAAMC,EAAgCC,GAAQ,KACrC,CACL,QAASF,EAAM,OAASR,EAAc,OAAO,MAC7C,SAAUH,EAAyBW,EAAM,OAAQR,EAAc,OAAO,MAAM,EAC5E,SAAUH,EAAyBW,EAAM,OAAQR,EAAc,OAAO,MAAM,EAC5E,aAAcQ,EAAM,YAAcR,EAAc,OAAO,WACvD,UAAWQ,EAAM,SAAWR,EAAc,OAAO,QACjD,cAAeQ,EAAM,aAAeR,EAAc,OAAO,YACzD,cAAeQ,EAAM,aAAeR,EAAc,OAAO,YACzD,aAAcQ,EAAM,YAAcR,EAAc,OAAO,UACzD,GACC,CACDQ,EAAM,MACNA,EAAM,OACNA,EAAM,OACNA,EAAM,WACNA,EAAM,QACNA,EAAM,YACNA,EAAM,YACNA,EAAM,UACR,CAAC,EAED,OAAOT,GAACY,EAAA,CAAa,GAAGH,EAAO,eAAgBV,GAA2B,SAAUW,EAAU,CAChG,ETlFA,YAAyC,wBU/DzC,OAAS,WAAAG,OAAe,QAExB,OAAS,4BAAAC,EAA0B,yBAAAC,OAAmD,wBAmO7E,cAAAC,OAAA,oBA1MF,IAAMC,EAA+B,CAC1C,KAAM,UACN,OAAQ,CACN,MAAO,IACP,MAAO,GACP,KAAM,EACN,WAAY,wBACZ,WAAY,yBACZ,WAAY,yBACZ,WAAY,wBACZ,SAAU,qBACV,cAAe,GACf,SAAU,IACV,UAAW,IACX,eAAgB,IAChB,WAAY,EACZ,gBAAiB,CACnB,CACF,EAEaC,GAA+B,CAC1C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,GACP,KAAM,EACN,WAAY,yBACZ,WAAY,uBACZ,WAAY,uBACZ,WAAY,qBACZ,SAAU,qBACV,cAAe,EACf,SAAU,IACV,UAAW,IACX,eAAgB,IAChB,WAAY,EACZ,gBAAiB,CACnB,CACF,EAEaC,GAA+B,CAC1C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,GACP,KAAM,EACN,WAAY,yBACZ,WAAY,wBACZ,WAAY,yBACZ,WAAY,yBACZ,SAAU,qBACV,cAAe,EACf,SAAU,IACV,UAAW,GACX,eAAgB,IAChB,WAAY,EACZ,gBAAiB,EACnB,CACF,EAEaC,GAA4B,CACvC,KAAM,OACN,OAAQ,CACN,MAAO,IACP,MAAO,GACP,KAAM,EACN,WAAY,wBACZ,WAAY,yBACZ,WAAY,yBACZ,SAAU,qBACV,WAAY,yBACZ,cAAe,EACf,SAAU,IACV,UAAW,IACX,eAAgB,IAChB,WAAY,GACZ,gBAAiB,CACnB,CACF,EAEaC,GAA+B,CAC1C,KAAM,UACN,OAAQ,CACN,MAAO,EACP,MAAO,GACP,KAAM,EACN,WAAY,wBACZ,WAAY,0BACZ,WAAY,yBACZ,SAAU,qBACV,WAAY,qBACZ,cAAe,EACf,SAAU,GACV,UAAW,IACX,eAAgB,EAChB,WAAY,EACZ,gBAAiB,GACnB,CACF,EAEaC,GAA6B,CACxC,KAAM,QACN,OAAQ,CACN,MAAO,EACP,MAAO,EACP,KAAM,EACN,WAAY,uBACZ,WAAY,uBACZ,WAAY,uBACZ,SAAU,qBACV,WAAY,yBACZ,cAAe,EACf,SAAU,IACV,UAAW,GACX,eAAgB,IAChB,WAAY,EACZ,gBAAiB,CACnB,CACF,EAEaC,GAA4B,CACvC,KAAM,OACN,OAAQ,CACN,MAAO,IACP,MAAO,GACP,KAAM,EACN,WAAY,yBACZ,WAAY,0BACZ,WAAY,0BACZ,WAAY,uBACZ,SAAU,uBACV,cAAe,EACf,SAAU,IACV,UAAW,IACX,eAAgB,IAChB,WAAY,GACZ,gBAAiB,CACnB,CACF,EAEaC,GAA6B,CACxC,KAAM,QACN,OAAQ,CACN,MAAO,IACP,MAAO,EACP,KAAM,EACN,WAAY,wBACZ,WAAY,wBACZ,WAAY,yBACZ,SAAU,qBACV,WAAY,yBACZ,cAAe,EACf,SAAU,IACV,UAAW,IACX,eAAgB,IAChB,WAAY,EACZ,gBAAiB,CACnB,CACF,EAEaC,GAAkC,CAC7CR,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACF,EAEaE,GAAWC,GAAqC,CAC3D,IAAMC,EAA4BC,GAAQ,KACjC,CACL,QAASF,EAAM,OAASV,EAAc,OAAO,MAC7C,aAAcH,EAAyBa,EAAM,WAAYV,EAAc,OAAO,UAAU,EACxF,aAAcH,EAAyBa,EAAM,WAAYV,EAAc,OAAO,UAAU,EACxF,aAAcH,EAAyBa,EAAM,WAAYV,EAAc,OAAO,UAAU,EACxF,WAAYH,EAAyBa,EAAM,SAAUV,EAAc,OAAO,QAAQ,EAClF,aAAcH,EAAyBa,EAAM,WAAYV,EAAc,OAAO,UAAU,EACxF,gBAAiBU,EAAM,eAAiBV,EAAc,OAAO,cAC7D,WAAYU,EAAM,UAAYV,EAAc,OAAO,SACnD,YAAaU,EAAM,WAAaV,EAAc,OAAO,UACrD,iBAAkBU,EAAM,gBAAkBV,EAAc,OAAO,eAC/D,aAAcU,EAAM,YAAcV,EAAc,OAAO,WACvD,kBAAmBU,EAAM,iBAAmBV,EAAc,OAAO,eACnE,GACC,CACDU,EAAM,MACNA,EAAM,WACNA,EAAM,WACNA,EAAM,WACNA,EAAM,SACNA,EAAM,WACNA,EAAM,cACNA,EAAM,SACNA,EAAM,UACNA,EAAM,eACNA,EAAM,WACNA,EAAM,eACR,CAAC,EAED,OAAOX,GAACc,EAAA,CAAa,GAAGH,EAAO,eAAgBZ,GAAuB,SAAUa,EAAU,CAC5F,EVjKA,YAAqC,wBWrErC,OAAS,WAAAG,OAAe,QAExB,OACE,4BAAAC,EACA,sBAAAC,GAGA,iBAAAC,MACK,wBAoSE,cAAAC,OAAA,oBA3QF,IAAMC,EAA4B,CACvC,KAAM,UACN,OAAQ,CACN,MAAO,EACP,SAAU,EACV,MAAO,GACP,KAAM,EACN,OAAQ,sBACR,OAAQ,yBACR,OAAQ,uBACR,WAAY,IACZ,SAAU,EACV,WAAY,IACZ,MAAO,GACP,gBAAiB,GACjB,WAAY,GACZ,MAAOF,EAAc,MACvB,CACF,EAEaG,GAA6B,CACxC,KAAM,eACN,OAAQ,CACN,MAAO,IACP,SAAU,KACV,MAAO,EACP,KAAM,EACN,OAAQ,yBACR,OAAQ,yBACR,OAAQ,8BACR,WAAY,IACZ,SAAU,IACV,WAAY,GACZ,MAAO,IACP,gBAAiB,EACjB,WAAY,EACZ,MAAOH,EAAc,IACvB,CACF,EAEaI,GAAyB,CACpC,KAAM,OACN,OAAQ,CACN,MAAO,IACP,SAAU,EACV,MAAO,GACP,KAAM,EACN,OAAQ,qBACR,OAAQ,uBACR,OAAQ,sBACR,WAAY,EACZ,SAAU,EACV,WAAY,GACZ,MAAO,GACP,gBAAiB,GACjB,WAAY,IACZ,MAAOJ,EAAc,OACvB,CACF,EAEaK,GAA4B,CACvC,KAAM,UACN,OAAQ,CACN,MAAO,IACP,SAAU,KACV,MAAO,GACP,KAAM,EACN,OAAQ,2BACR,OAAQ,6BACR,OAAQ,2BACR,WAAY,GACZ,SAAU,EACV,WAAY,IACZ,MAAO,GACP,gBAAiB,EACjB,WAAY,IACZ,MAAOL,EAAc,MACvB,CACF,EAEaM,GAA4B,CACvC,KAAM,UACN,OAAQ,CACN,MAAO,IACP,SAAU,IACV,MAAO,KACP,KAAM,EACN,OAAQ,6BACR,OAAQ,6BACR,OAAQ,uBACR,WAAY,IACZ,SAAU,EACV,WAAY,IACZ,MAAO,GACP,gBAAiB,EACjB,WAAY,GACZ,MAAON,EAAc,MACvB,CACF,EAEaO,GAA0B,CACrC,KAAM,YACN,OAAQ,CACN,MAAO,GACP,SAAU,EACV,MAAO,IACP,KAAM,EACN,OAAQ,6BACR,OAAQ,6BACR,OAAQ,uBACR,WAAY,EACZ,SAAU,EACV,WAAY,IACZ,MAAO,IACP,gBAAiB,EACjB,WAAY,GACZ,MAAOP,EAAc,IACvB,CACF,EAEaQ,GAAwB,CACnC,KAAM,WACN,OAAQ,CACN,MAAO,EACP,SAAU,IACV,MAAO,IACP,KAAM,EACN,OAAQ,4BACR,OAAQ,0BACR,OAAQ,2BACR,WAAY,IACZ,SAAU,GACV,WAAY,IACZ,MAAO,GACP,gBAAiB,GACjB,WAAY,IACZ,MAAOR,EAAc,MACvB,CACF,EAEaS,GAA4B,CACvC,KAAM,UACN,OAAQ,CACN,MAAO,IACP,SAAU,EACV,MAAO,IACP,KAAM,EACN,OAAQ,uBACR,OAAQ,2BACR,OAAQ,8BACR,WAAY,GACZ,SAAU,EACV,WAAY,GACZ,MAAO,IACP,gBAAiB,EACjB,WAAY,EACZ,MAAOT,EAAc,MACvB,CACF,EAEaU,GAA2B,CACtC,KAAM,SACN,OAAQ,CACN,MAAO,IACP,SAAU,EACV,MAAO,IACP,KAAM,EACN,OAAQ,6BACR,OAAQ,8BACR,OAAQ,4BACR,WAAY,IACZ,SAAU,EACV,WAAY,IACZ,MAAO,IACP,gBAAiB,GACjB,WAAY,IACZ,MAAOV,EAAc,IACvB,CACF,EAEaW,GAAkC,CAC7C,KAAM,iBACN,OAAQ,CACN,MAAO,EACP,SAAU,IACV,MAAO,IACP,KAAM,EACN,OAAQ,4BACR,OAAQ,4BACR,OAAQ,2BACR,WAAY,IACZ,SAAU,EACV,WAAY,IACZ,MAAO,EACP,gBAAiB,EACjB,WAAY,EACZ,MAAOX,EAAc,OACvB,CACF,EAEaY,GAAyB,CACpC,KAAM,OACN,OAAQ,CACN,MAAO,IACP,SAAU,GACV,MAAO,EACP,KAAM,EACN,OAAQ,2BACR,OAAQ,2BACR,OAAQ,4BACR,WAAY,EACZ,SAAU,EACV,WAAY,EACZ,MAAO,IACP,gBAAiB,EACjB,WAAY,IACZ,MAAOZ,EAAc,OACvB,CACF,EAIaa,GAA4B,CACvCX,EACAK,GACAJ,GACAQ,GACAF,GACAD,GACAI,GACAF,GACAL,GACAC,GACAF,EACF,EAEaU,GAAQC,GAAkC,CACrD,IAAMC,EAAyBC,GAAQ,KAC9B,CACL,QAASF,EAAM,OAASb,EAAc,OAAO,MAC7C,WAAYa,EAAM,UAAYb,EAAc,OAAO,SACnD,SAAUJ,EAAyBiB,EAAM,OAAQb,EAAc,OAAO,MAAM,EAC5E,SAAUJ,EAAyBiB,EAAM,OAAQb,EAAc,OAAO,MAAM,EAC5E,SAAUJ,EAAyBiB,EAAM,OAAQb,EAAc,OAAO,MAAM,EAC5E,aAAca,EAAM,YAAcb,EAAc,OAAO,WACvD,WAAYa,EAAM,UAAYb,EAAc,OAAO,SACnD,aAAca,EAAM,YAAcb,EAAc,OAAO,WACvD,QAASa,EAAM,OAASb,EAAc,OAAO,MAC7C,kBAAmBa,EAAM,iBAAmBb,EAAc,OAAO,gBACjE,aAAca,EAAM,YAAcb,EAAc,OAAO,WACvD,QAASa,EAAM,OAASb,EAAc,OAAO,KAC/C,GACC,CACDa,EAAM,MACNA,EAAM,SACNA,EAAM,OACNA,EAAM,OACNA,EAAM,OACNA,EAAM,WACNA,EAAM,SACNA,EAAM,WACNA,EAAM,MACNA,EAAM,gBACNA,EAAM,WACNA,EAAM,KACR,CAAC,EAED,OAAOd,GAACiB,EAAA,CAAa,GAAGH,EAAO,eAAgBhB,GAAoB,SAAUiB,EAAU,CACzF,EXlOA,OAA4B,iBAAAG,OAAwC,wBAGpE,OAAS,4BAAAC,OAAgC",
  "names": ["useEffect", "useRef", "ShaderMountVanilla", "jsx", "ShaderMount", "ref", "fragmentShader", "style", "uniforms", "webGlContextAttributes", "speed", "seed", "canvasRef", "shaderMountRef", "useMemo", "getShaderColorFromString", "grainCloudsFragmentShader", "jsx", "defaultPreset", "skyPreset", "grainCloudsPresets", "GrainClouds", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "meshGradientFragmentShader", "jsx", "defaultPreset", "beachPreset", "fadedPreset", "meshGradientPresets", "MeshGradient", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "smokeRingFragmentShader", "jsx", "defaultPreset", "cloudPreset", "firePreset", "electricPreset", "poisonPreset", "smokeRingPresets", "SmokeRing", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "neuroNoiseFragmentShader", "jsx", "defaultPreset", "marblePreset", "neuroNoisePresets", "NeuroNoise", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "dotsOrbitFragmentShader", "jsx", "defaultPreset", "dotsOrbitPresets", "DotsOrbit", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "dotsGridFragmentShader", "getShaderColorFromString", "DotsGridShapes", "jsx", "defaultPreset", "trianglesPreset", "bubblesPreset", "treeLinePreset", "diamondsPreset", "wallpaperPreset", "matrixPreset", "waveformPreset", "dotsGridPresets", "DotsGrid", "props", "uniforms", "useMemo", "ShaderMount", "DotsGridShapes", "useMemo", "getShaderColorFromString", "steppedSimplexNoiseFragmentShader", "jsx", "defaultPreset", "magmaPreset", "bloodCellPreset", "firstContactPreset", "steppedSimplexNoisePresets", "SteppedSimplexNoise", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "metaballsFragmentShader", "jsx", "defaultPreset", "metaballsPresets", "Metaballs", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "wavesFragmentShader", "jsx", "defaultPreset", "spikesPreset", "groovyPreset", "tangledUpPreset", "zigZagPreset", "waveRidePreset", "wavesPresets", "Waves", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "perlinNoiseFragmentShader", "jsx", "defaultPreset", "preset1", "preset2", "preset3", "preset4", "preset5", "perlinNoisePresets", "PerlinNoise", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "voronoiFragmentShader", "jsx", "defaultPreset", "classicPreset", "giraffePreset", "eyesPreset", "bubblesPreset", "cellsPreset", "glowPreset", "tilesPreset", "voronoiPresets", "Voronoi", "props", "uniforms", "useMemo", "ShaderMount", "useMemo", "getShaderColorFromString", "warpFragmentShader", "PatternShapes", "jsx", "defaultPreset", "presetCauldron", "presetSilk", "presetPassion", "presetPhantom", "presetAbyss", "presetInk", "presetIceberg", "presetNectar", "presetFilteredLight", "presetKelp", "warpPresets", "Warp", "props", "uniforms", "useMemo", "ShaderMount", "PatternShapes", "getShaderColorFromString"]
}
